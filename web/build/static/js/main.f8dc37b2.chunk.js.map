{"version":3,"sources":["locales/en/layout/header.tsx","locales/en/screens/home.tsx","locales/en/shared/search_bar.tsx","configs/i18n.tsx","serviceWorker.js","configs/store.tsx","screens/login/Login.tsx","configs/root.tsx","configs/app.tsx","index.tsx","layout/header/index.tsx"],"names":["title","githubLink","loading","currentLocation","findATable","location","people","person","i18n","use","initReactI18next","init","resources","en","fallbackLng","ns","defaultNS","debug","interpolation","escapeValue","react","wait","bindI18n","err","t","Boolean","window","hostname","match","CoreCtx","React","createContext","CoreProvider","props","store","auth","useState","userToken","user","id","username","email","firstname","lastname","Provider","value","children","Login","className","Root","useContext","console","log","publicRoutes","exact","path","component","lazy","map","key","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Header","useTranslation"],"mappings":"odAAe,GACbA,MAAO,2CCDM,GACbC,WAAY,cACZC,QAAS,aACTF,MAAO,WCHM,GACbG,gBAAiB,mBACjBC,WAAY,eACZF,QAAS,aACTG,SAAU,WACVC,OAAQ,SACRC,OAAQ,UCCVC,IAAKC,IAAIC,KAAkBC,KACzB,CACEC,UAAW,CACTC,MAEFC,YAAa,KAGbC,GAAI,CAAC,gBACLC,UAAW,eAEXC,OAAO,EAEPC,cAAe,CACbC,aAAa,GAGfC,MAAO,CACLC,MAAM,EACNC,SAAU,4BAGd,SAACC,EAAKC,GACQA,KAMDhB,EAAf,ECxBoBiB,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2D,qCCfOC,EAAUC,IAAMC,cAAmC,MAEnDC,EAAe,SAACC,GAC3B,IAAMC,EAA6B,CACjCC,KAAML,IAAMM,SAAS,CACnBC,UAAW,QAEbC,KAAMR,IAAMM,SAAS,CACnBG,GAAI,MACJC,SAAU,MACVC,MAAO,gBACPC,UAAW,QACXC,SAAU,cAId,OAAO,kBAACd,EAAQe,SAAT,CAAkBC,MAAOX,GAAQD,EAAMa,W,gBCZnCC,G,OAAyB,WACpC,OACE,oCACE,kBAAC,IAAD,MACA,yBAAKC,UAAU,aCJRC,EAAO,SAAC,GAAyB,IAAvBH,EAAsB,EAAtBA,SACdR,EADoC,YAC5BY,qBAAWrB,GAASS,KADQ,MAI3C,OAFAa,QAAQC,IAAId,GAEC,OAATA,EACK,kBAAC,EAAD,MAIP,oCACGQ,ICRDO,EAFc,CAAC,CAAEC,OAAO,EAAMC,KAAM,IAAKC,UAFlC1B,IAAM2B,MAAK,kBAAM,yDAIGC,KAAI,gBAAGH,EAAH,EAAGA,KAAStB,EAAZ,+BACjC,kBAAC,IAAD,eAAO0B,IAAKJ,EAAMA,KAAMA,GAAUtB,OCHtC2B,IAASC,OAAO,mBDMI,kBAChB,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,+BACfT,SCZT,MAASU,SAASC,eAAe,SL0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mFMvHJC,IANA,WAAO,IACZ/C,EAAMgD,YAAe,UAArBhD,EAER,OAAO,uBAAYxB,MAAOwB,EAAE,c","file":"static/js/main.f8dc37b2.chunk.js","sourcesContent":["export default {\n  title: 'React TypeScript Ant Design Boilerplate'\n};\n","export default {\n  githubLink: 'Github Link',\n  loading: 'Loading...',\n  title: 'Example'\n};\n","export default {\n  currentLocation: 'Current Location',\n  findATable: 'Find a Table',\n  loading: 'Loading...',\n  location: 'Location',\n  people: 'People',\n  person: 'Person'\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport * as en from '../locales/en';\n\nlet translate: any;\n\ni18n.use(initReactI18next).init(\n  {\n    resources: {\n      en\n    },\n    fallbackLng: 'en',\n\n    // have a common namespace used around the full app\n    ns: ['translations'],\n    defaultNS: 'translations',\n\n    debug: false,\n\n    interpolation: {\n      escapeValue: false // not needed for react!!\n    },\n\n    react: {\n      wait: true,\n      bindI18n: 'languageChanged loaded'\n    }\n  },\n  (err, t) => {\n    translate = t;\n  }\n);\n\nexport { translate as t };\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { TCoreCtxUseStateEnv } from '../types';\n\nexport const CoreCtx = React.createContext<TCoreCtxUseStateEnv>(null as never);\n\nexport const CoreProvider = (props: React.PropsWithChildren<{}>) => {\n  const store: TCoreCtxUseStateEnv = {\n    auth: React.useState({\n      userToken: 'foo'\n    }),\n    user: React.useState({\n      id: '19h',\n      username: '19h',\n      email: 'kenan@sig.dev',\n      firstname: 'Kenan',\n      lastname: 'Sulayman'\n    })\n  };\n\n  return <CoreCtx.Provider value={store}>{props.children}</CoreCtx.Provider>;\n};\n","import React from 'react';\nimport Header from '@layout/header';\n\nimport './Login.less';\n\ntype Props = {};\n\nexport const Login: React.FC<Props> = () => {\n  return (\n    <>\n      <Header />\n      <div className=\"login\" />\n    </>\n  );\n};\n","import React, { PropsWithChildren, useContext } from 'react';\n\nimport { CoreCtx } from './store';\nimport { Login } from '../screens/login/Login';\n\ntype Props = PropsWithChildren<{}>;\n\nexport const Root = ({ children }: Props) => {\n  const [user] = useContext(CoreCtx).user;\n  console.log(user);\n\n  if (user === null) {\n    return <Login/>;\n  }\n\n  return (\n    <>\n      {children}\n    </>\n  );\n};\n","import React, { Suspense } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { CoreProvider } from './store';\nimport { Root } from './root';\n\nconst Home = React.lazy(() => import('../screens/home/Home'));\n\nconst publicPaths = [{ exact: true, path: '/', component: Home }];\n\nconst publicRoutes = publicPaths.map(({ path, ...props }) => (\n    <Route key={path} path={path} {...props} />\n));\n\nexport const App =  () => (\n    <BrowserRouter>\n        <CoreProvider>\n            <Root>\n                <Switch>\n                    <Suspense fallback={<div/>}>\n                        {publicRoutes}\n                    </Suspense>\n                </Switch>\n            </Root>\n        </CoreProvider>\n    </BrowserRouter>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './configs/i18n';\nimport * as serviceWorker from './serviceWorker';\nimport './index.less';\nimport { App } from './configs/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageHeader } from 'antd';\n\nimport './styles.less';\n\nconst Header = () => {\n  const { t } = useTranslation('header');\n\n  return <PageHeader title={t('title')} />;\n};\n\nexport default Header;\n"],"sourceRoot":""}